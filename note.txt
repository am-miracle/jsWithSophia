// var is a function scope or global scope which means it is visible in every function.
// example;

// var name = 'bruce';
// if (true){
//     var name = 'michael';
//     console.log(name) //michael
// }
// console.log(name) //michael

// var allows you to re-declare the same variable in the same scope.
 var sport = "soccer";
 var sport = "basketball"; // no problem 'soccer' has been replaced by basketball

// var allows hoisting which means that variables can be used before they are declared.
console.log(country); //undefined
var country = "nigeria";
console.log(country); //nigeria


// let is a block scope which means it only exist within the block that it is declared in.
//if we declare name with let in the block of the if-statement ,that name will be "michael" inside that block and the outer name will still be "bruce"

//example;

// let name = 'bruce';
// if (true){
//     var name = 'michael';
//     console.log(name) //michael
// }
// console.log(name) //bruce

// let don't allows you to re-declare the same variable in the same scope.

var sport = "soccer";
var sport = "basketball"; // syntax error: identifier "soccer" has already been declared

// let don't allows hoisting which means that variables can be used before they are declared.
console.log(country); // reference error
let country = "nigeria";
console.log(country); //nigeria



// 5. Brief note on booleans, BigInt, Symbols, array and objects

BOOLEANS- 
    it is a primitive data type in javascript 
     are either two values YES/NO, TRUE/FALSE and ON/OFF. javascript also treats empty string (" "), 0, underfined and null as false. everything else is true. there are two types  boolean() function and boolean object
boolean objects : can be initialize with new keyword 
        example : let bool = new Boolean(true);
                    console.log(bool); //true
boolean () function - is used to find if out if and expression is TRUE
        example: Boolean(1 > 2) // returns TRUE

BIGINT- it is used to represent whole numbers larger than 2^53-1. which   is the largest number javascript can represent number value. it is created by appending n to the end of a value. with bigint you can store and operate on large values and even beyond the safe integer limit for numbers. you can use operators in Bigint.

example : let x = 2n ** 53n; // 9007199254740992n
          let y = x + 1n; // 9007199254740993n // as you can see the number at end changed to 3 (n = 1 so 1 was added to 2 (1+2 = 3)).


SYMBOLS -  it is a primitive data type. it is used to add unique property keys to an object that won't collide with keys any other code might add to the object. they are often used to identify object properties. once a symbol is created , its value is kept private and for internal use. use. you can create a symbol by calling it . every symbol() call is guaranteed to return a new and unique symbol. you can also pass a parameter to a symbol.

example: let mySymbol = Symbol();
         symbol.for("key"); //"key"



ARRAY -  array are denoted with bracket symbol[].it is used to store multiple value in a single variables. it can be nested . you can access an array by referring to the index number.

example : let sport = ["soccer", "basketball"]
example :  sport = [0] // "soccer"


OBJECT - object are denoted with curly bracket {}.it is also used to store multiple value in a single variables. it can be nested. you can access an object by dot notation.

example : let sport = {"soccer", "basketball"}
example : hobbies = {
    sport: "soccer",
    house-choir : "sweeping the house"
}
hobbies.sport // soccer